from aiogram import Dispatcher, executor, Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from states import Registration
import buttons
import database
from config import TOKEN
from sms import send_sms
import random
import requests
from aiogram.utils.deep_linking import decode_payload


bot = Bot(token=TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start_message(message):
    caption = '''–ü—Ä–∏–≤–µ—Ç)
–î–∞, –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –∫–∞–∫ –±—ã –ø–æ–∑–¥–Ω–æ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ª–µ—Ç—É, –Ω–æ –¥—É–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.

–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–µ —Ç–µ–ª–æ, —Ç–æ –Ω–∏–∂–µ —Ç–µ–±–µ —á–µ–∫-–ª–∏—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏)

–ù—É –∞ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∂–∏–≤–æ—Ç–µ, –Ω–æ –∏ –≤ –∫–∞—Ä–º–∞–Ω–µ. –ü–æ—ç—Ç–æ–º—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è <b>—Å–∫–∏–¥–∫–∏ –¥–æ 40% –Ω–∞ –Ω–∞—à–∏ –∫—É—Ä—Å—ã</b>, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ —Ç–æ–∂–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–º–æ–∂–µ—Ç —Å–∫–∏–Ω—É—Ç—å –ø–æ 8 <s>–∫–∏–ª–æ–≥—Ä–∞–º–º</s> –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞.

–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ —Ç–æ –∂–º–∏ –Ω–∞ "–ü–æ—É–º–Ω–µ–π!"'''
    args = message.get_args()
    if args:
        name, phone_number = args.split('-')
        file_path = os.path.join(os.getcwd(), "tehnikum.jpg")
        with open(file_path, "rb") as photo:

            await bot.send_photo(chat_id=message.chat.id,
                                 photo=photo,
                                 caption=caption, parse_mode=types.ParseMode.HTML, reply_markup=buttons.web_app_kb())
            user_data = {
                'id': message.chat.id,
                'first_name': name,
                'phone_number': phone_number,
                'is_verified': True,
                'verification_code': 0
            }
            response = requests.post(
                'http://127.0.0.1:8000/api/bot-users/', data=user_data)
            print(f'User has been created: {response.json()}')

    else:
        caption = '''–ü—Ä–∏–≤–µ—Ç)
    –î–∞, –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –∫–∞–∫ –±—ã –ø–æ–∑–¥–Ω–æ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ª–µ—Ç—É, –Ω–æ –¥—É–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.

    –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–µ —Ç–µ–ª–æ, —Ç–æ –Ω–∏–∂–µ —Ç–µ–±–µ —á–µ–∫-–ª–∏—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–Ω–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏)

    –ù—É –∞ –º—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∂–∏–≤–æ—Ç–µ, –Ω–æ –∏ –≤ –∫–∞—Ä–º–∞–Ω–µ. –ü–æ—ç—Ç–æ–º—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è <b>—Å–∫–∏–¥–∫–∏ –¥–æ 40% –Ω–∞ –Ω–∞—à–∏ –∫—É—Ä—Å—ã</b>, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ —Ç–æ–∂–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–º–æ–∂–µ—Ç —Å–∫–∏–Ω—É—Ç—å –ø–æ 8 <s>–∫–∏–ª–æ–≥—Ä–∞–º–º</s> –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞.

    –ï—Å–ª–∏ –≥–æ—Ç–æ–≤ —Ç–æ –∂–º–∏ –Ω–∞ "–ò–º—è"'''
        # ? –ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id

        user = requests.get(
            f'http://127.0.0.1:8000/api/bot-users/?id={user_id}').json()

        if user and user[0]['is_verified']:
            await message.answer('–ñ–º–∏ –Ω–∞ <b>–ü–æ—É–º–Ω–µ–π!</b> ‚¨áÔ∏è', reply_markup=buttons.web_app_kb())
        elif user and not user[0]['is_verified']:
            await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=buttons.phone_number_kb())
            await Registration.getting_phone_number.set()
            get_number(message)
        else:
            file_path = os.path.join(os.getcwd(), "tehnikum.jpg")
            with open(file_path, "rb") as photo:

                await bot.send_photo(chat_id=message.chat.id,
                                     photo=photo,
                                     caption=caption, parse_mode=types.ParseMode.HTML, reply_markup=buttons.name_kb())

            # ? –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
            await Registration.getting_started.set()


@ dp.message_handler(state=Registration.getting_started)
async def getting_started(message):
    await message.answer('''–ö—Ä–∞—Å–∞–≤–∞!
–ú—ã –≤—Å–µ–≥–¥–∞ –∑–∞ —Ç–æ, —á—Ç–æ –Ω–∞–¥–æ –∫–∞—á–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ üçë , –Ω–æ  –∏ üß†

–ö–∞–∫ –∑–æ–≤—É—Ç —Ç–æ —Ç–µ–±—è? –û–¥–∏–Ω (–æ–¥–Ω–∞) —Ç—É—Ç –æ—Ç–¥—ã—Ö–∞–µ—à—å?''')

    await Registration.getting_name_state.set()


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
@ dp.message_handler(state=Registration.getting_name_state)
async def get_name(message, state=Registration.getting_name_state):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è
    user_name = message.text
    await state.update_data(name=user_name)

    await message.answer('–¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∑–∞—á–∏—Å–ª–∏—Ç—å –ø–æ –Ω–µ–º—É —Å–∫–∏–¥–∫—É)', reply_markup=buttons.phone_number_kb())

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞

    await Registration.getting_phone_number.set()


# –≠—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@ dp.message_handler(state=Registration.getting_phone_number, content_types=['contact'])
async def get_number(message, state=Registration.getting_phone_number):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    await state.update_data(user_id=message.from_user.id)
    print(message.text)
    if message.contact:
        phone_number = message.contact.phone_number
        get_verification(message, state=Registration.getting_verification_code)
    elif len(message.text) == 12:
        phone_number = message.text
        get_verification(message, state=Registration.getting_verification_code)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞')

    await state.update_data(number=phone_number)

    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å. –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–±–µ —Å–º—Å —Å –∫–æ–¥–æ–º, –≤–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞)', reply_markup=types.ReplyKeyboardRemove())

    # ? –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º—Å —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    verification_code = random.randint(1000, 999999)
    # send_sms(message.contact.phone_number,
    #          f'–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}')

    all_info = await state.get_data()

    name = all_info.get("name")
    user_id = message.from_user.id
    code = all_info.get("verification_code")

    already_user = requests.get(
        f'http://127.0.0.1:8000/api/bot-users/?id={message.from_user.id}').json()
    print(already_user)

    # ? –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if already_user:
        new_user_info = {
            "id": user_id,
            "first_name": already_user[0]['first_name'],
            "phone_number": phone_number,
            "verification_code": verification_code,
            "is_verified": "False"
        }
        url = f'http://127.0.0.1:8000/api/bot-users/{user_id}/'

        # ? –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥
        response = requests.put(url, data=new_user_info)
        print(f'Verification code has been updated: {response.json()}')
    else:
        user_info = {
            "id": user_id,
            "first_name": name,
            "phone_number": phone_number,
            "verification_code": verification_code,
            "is_verified": "False"

        }
        url = 'http://127.0.0.1:8000/api/bot-users/'

        # ? –û—Ç–ø–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        response = requests.post(url, data=user_info)
        print(f'User has been created: {response.json()}')

    # database.add_user(user_id, name, phone_number, code)
    # print(database.get_users())


@ dp.message_handler(state=Registration.getting_phone_number, content_types=['text'])
async def get_verification(message, state=Registration.getting_verification_code,):
    verification_code = message.text
    await state.update_data(verification_code=verification_code)

    url = f'http://127.0.0.1:8000/api/bot-users/?id={message.from_user.id}'

    try:

        user = requests.get(url).json()[0]
        print(user)

    except:
        user = None

    # ? –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if user:
        # ? –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if int(verification_code) == int(user['verification_code']):
            await message.answer('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –∏ —É–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –∫—É—Äc. –ñ–º–∏ –Ω–∞ <b>–ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑!</b> ‚¨áÔ∏è', reply_markup=buttons.web_app_kb())
            user_data = {
                'id': user['id'],
                'first_name': user['first_name'],
                'phone_number': user['phone_number'],
                "is_verified": "True",
                'verification_code': user['verification_code']
            }
            url = f'http://127.0.0.1:8000/api/bot-users/{user["id"]}/'
            response = requests.put(url, data=user_data)
            # ? –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            print(f'Is verified status has been updated: {response.json()}')
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä!', reply_markup=buttons.phone_number_kb())
            await Registration.getting_phone_number.set()

    all_info = await state.get_data()
    print(all_info)

    await Registration.getting_verification_code.set()

executor.start_polling(dp, skip_updates=True)
